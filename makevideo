
#!/bin/bash

# makevideo.sh FRAMERATE [COMPRESSION:0,1,2] [OVERCLOCK:0,1] IMAGES...
#
# Available clockspeeds: check src/rp2_common/hardware_clocks/scripts/vcocalc.py  


bash ./lib_pathfinder.sh
export $(grep LIBPRIMED_PATH LIB_PATHS)
export $(grep PICO_SDK_PATH LIB_PATHS)
export $(grep PICO_LCD_PATH LIB_PATHS)
export $(grep ZLIB_RP2XX_PATH LIB_PATHS)

echo "* Attempting to copy pico_sdk_import.cmake"
cp $PICO_SDK_PATH/external/pico_sdk_import.cmake ./


# Framerate
re='^[+]?[0-9]+([.][0-9]+)?$'
if [[ $1 == "" ]] || [[ $1 == "0" ]] || ! [[ $1 =~ $re ]]; then
  echo "error: framerate not a number" >&2
  echo "usage: makevideo.sh FRAMERATE MODE [OVERCLOCK] [images]" >&2
  exit 1
fi
echo "* Requested framerate: "$1" fps"
echo "#define FRAMERATE "$1 > ./Framerate.h


if [[ $2 == "" ]] || [[ $2 != "0" ]] && [[ $2 != "1" ]] && [[ $2 != "2" ]]; then
  echo "error: Invalid compilation mode." >&2 
  echo "0: Raw data. Largest binary size, highest framerate." >&2
  echo "1: Single frame compression." >&2
  echo "2: Blokweave compression. Highest possible compression. Smallest binary, lowest framerate." >&2
  echo "usage: makevideo.sh FRAMERATE MODE [OVERCLOCK] [images]" >&2
  exit 1
fi
echo "* Choosing frame compilation mode: "$2



# Overclock options
re='^[0-9]+$'
if [[ $3 =~ $re ]]; then
  imgparam=4
  if [[ $3 == "0" ]]; then
    overclock="0"
  else
    overclock="1"
  fi
else
  overclock="0"
  imgparam=3
fi
if [[ $overclock == "0" ]]; then
  echo "* Standard processor speed: 133 MHz"
else
  echo "* Overclocking processor: 225 MHz"
fi
echo "#define OVERCLOCK "$overclock >> ./Framerate.h

echo


# Selecting image set
echo "* Compiling images into ImageDataRaw.c and ImageDataRaw.h byte array files..."
if [[ "" == "${@:$imgparam}" ]]; then
    if [[ -d $(cat IMGS_PATH) && ! -z $(ls -A $(cat IMGS_PATH)) ]]; then	
	python3 bytearray.py $(cat IMGS_PATH)*
    else
	python3 bytearray.py ./imgs/*
    fi
else
    python3 bytearray.py ${@:imgparam}
fi



CFLAGS="-std=c89 -Wall -g -O0"

# Choose compression method.
if [ $2 == "2" ]; then
  echo "* Blokweave compression."
  echo "* Compiling compress-blokweave.c with ImageDataRaw.h and outputting compressed ImageDataBlokZ.h..."
  gcc $CFLAGS -I$LIBPRIMED_PATH compress-blokweav.c ImageDataRaw.c weave.c -L$LIBPRIMED_PATH -lprimed -lm -lz
  ./a.out
  rm a.out

elif [ $2 == "1" ]; then
  echo "* Single frame compression."
  echo "* Compiling compress-simpl.c with ImageDataRaw.h and outputting compressed ImageDataZ.h..."
  gcc $CFLAGS compress-singlefr.c ImageDataRaw.c -lz
  ./a.out
  rm a.out
fi

# Ensure both headers exit, if only as empty files.
touch ImageDataZ.h
touch ImageDataBlokZ.h 

echo "* Moving ImageData files to ./screens for compilation."
mv ImageData*.[ch] ./screens



echo "* Entering ./build and compiling..."
[ ! -d "$build" ] && mkdir build  
cd ./build
cmake ..
make

if [ -e video.uf2 ]; then
    echo "* Moving video.uf2 to base directory."
    mv video.uf2 ..
else
    echo "error: Failed to compile video."    
fi
cd ..


