#!/bin/bash

# makevideo.sh FRAMERATE [COMPRESSION:0,1,2] [OVERCLOCK:0,1] IMAGES...
#
# Available clockspeeds: check src/rp2_common/hardware_clocks/scripts/vcocalc.py  


# Check for necessary defd path variables.
if [[ -e env_vars ]]; then
    export $(grep PICO_SDK_PATH env_vars)
    export $(grep PICO_LCD_PATH env_vars)
    export $(grep ZLIB_RP2XX_PATH env_vars)
    ENV_VARS_EDIT=0
fi

# If undefined or not a DIR, try to find with find() in $HOME
if [[ -z ${PICO_SDK_PATH+x} || ! -d $PICO_SDK_PATH ]]; then
    ENV_VARS_EDIT=1
    echo "PICO_SDK_PATH undefined, attempting to find in $HOME..."    
    export PICO_SDK_PATH=$(./shortest $(find ~ -type d -name pico-sdk 2>/dev/null))      
fi
if [[ -z ${PICO_LCD_PATH+x} || ! -d $PICO_LCD_PATH ]]; then
    ENV_VARS_EDIT=1
    echo "PICO_LCD_PATH undefined, attempting to find in $HOME..."
    export PICO_LCD_PATH=$(./shortest $(find ~ -type d -name Pico_LCD_code 2>/dev/null))
fi 
if [[ -z ${ZLIB_RP2XX_PATH+x} || ! -d $ZLIB_RP2XX_PATH ]]; then
    ENV_VARS_EDIT=1
    echo "ZLIB_RP2XX_PATH undefined, attempting to find in $HOME..."
    export ZLIB_RP2XX_PATH=$(./shortest $(find ~ -type d -name zlib-rp2xx 2>/dev/null))
fi 

if [[ ! -d $PICO_SDK_PATH || ! -d $PICO_LCD_PATH || ! -d $ZLIB_RP2XX_PATH ]]; then
    echo "error: Library paths undefined"
    exit 1
fi

echo $PICO_SDK_PATH
echo "* Attempting to copy pico_sdk_import.cmake"
cp $PICO_SDK_PATH/external/pico_sdk_import.cmake ./
echo $PICO_LCD_PATH
echo $ZLIB_RP2XX_PATH

# Write results to set_vars
if [[ $ENV_VARS_EDIT == 1 ]]; then    
    echo "PICO_SDK_PATH=$PICO_SDK_PATH" > env_vars
    echo "PICO_LCD_PATH=$PICO_LCD_PATH" >> env_vars
    echo "ZLIB_RP2XX_PATH=$ZLIB_RP2XX_PATH" >> env_vars
fi


# Framerate
re='^[+]?[0-9]+([.][0-9]+)?$'
if [[ $1 == "" ]] || [[ $1 == "0" ]] || ! [[ $1 =~ $re ]]; then
  echo "error: framerate not a number" >&2
  echo "usage: makevideo.sh FRAMERATE MODE [OVERCLOCK] [images]" >&2
  exit 1
fi
echo "* Requested framerate: "$1" fps"
echo "#define FRAMERATE "$1 > ./Framerate.h


if [[ $2 == "" ]] || [[ $2 != "0" ]] && [[ $2 != "1" ]] && [[ $2 != "2" ]]; then
  echo "error: Invalid compilation mode." >&2 
  echo "0: Raw data. Largest binary size, highest framerate." >&2
  echo "1: Single frame compression." >&2
  echo "2: Blokweave compression. Highest possible compression. Smallest binary, lowest framerate." >&2
  echo "usage: makevideo.sh FRAMERATE MODE [OVERCLOCK] [images]" >&2
  exit 1
fi
echo "* Choosing frame compilation mode: "$2



# Overclock options
re='^[0-9]+$'
if [[ $3 =~ $re ]]; then
  imgparam=4
  if [[ $3 == "0" ]]; then
    overclock="0"
  else
    overclock="1"
  fi
else
  overclock="0"
  imgparam=3
fi
if [[ $overclock == "0" ]]; then
  echo "* Standard processor speed: 133 MHz"
else
  echo "* Overclocking processor: 225 MHz"
fi
echo "#define OVERCLOCK "$overclock >> ./Framerate.h

echo


# Selecting image set

echo "* Compiling images into ImageDataRaw.c and ImageDataRaw.h byte array files..."
if [[ "" == "${@:$imgparam}" ]]; then
    if [[ ! -d ../imgs/ || -z $(ls -A ../imgs/) ]]; then
	python3 bytearray.py ./imgs/*
    else
	python3 bytearray.py ../imgs/*
    fi
else
    python3 bytearray.py ${@:imgparam}
fi


# Choose compression method.
if [ $2 == "2" ]; then
  echo "* Blokweave compression. Compiling compress-blokweave.c with ImageDataRaw.h and outputting compressed ImageDataBlokZ.h..."
  gcc compress-blokweav.c ImageDataRaw.c weave.c primed.c -lm -lz && ./a.out && rm a.out
  touch ImageDataZ.h
  
elif [ $2 == "1" ]; then
  echo "* Single frame compression. Compiling compress-simpl.c with ImageDataRaw.h and outputting compressed ImageDataZ.h..."
  gcc compress-singlefr.c ImageDataRaw.c -lz && ./a.out && rm a.out
  touch ImageDataBlokZ.h
else
  touch ImageDataBlokZ.h 
  touch ImageDataZ.h 
fi

echo "* Moving ImageData files to ./screens for compilation."
mv ImageData*.[ch] ./screens


echo "* Entering ./build and compiling..."
[ ! -d "$build" ] && mkdir build  
cd ./build
cmake ..
make

if [ -e video.uf2 ]; then
    echo "* Moving video.uf2 to base directory."
    mv video.uf2 ..
else
    echo "error: Failed to compile video."    
fi
cd ..
